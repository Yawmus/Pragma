package com.peter.rogue.inventory;

import java.util.ArrayList;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.badlogic.gdx.math.Rectangle;
import com.peter.rogue.Global;
import com.peter.rogue.entities.Entity;

public class Chest extends Entity {
	
	private ArrayList<Item> items;
	private ArrayList<Rectangle> collisions;
	public static final int HEIGHT = 200, WIDTH = 300;
	private Texture model = new Texture("img/model.png");
	private Item hover;
	
	public Chest(){
		super("c1.png", "Chest");
		this.name = "Chest";
		this.items = new ArrayList<Item>();
		this.collisions = new ArrayList<Rectangle>();
		for(int i=0; i<5; i++){
			if(Global.rand(3, 0) == 0)
				add(Food.MEAT);
			else
				add(Food.BREAD);
		}
	}
	
	public void add(Item item){
		item.pickedUp(true);
		items.add(item);
		collisions.add(new Rectangle(0, 0, 150, 15));
	}
	public void display(SpriteBatch spriteBatch, BitmapFont font){
		Global.screenShapes.begin(ShapeType.Filled);
		Global.screenShapes.setColor(0f, 0f, 0f, 1f);
		Global.screenShapes.rect(270, 250, HEIGHT, WIDTH);
		Global.screenShapes.end();

		Global.screenShapes.begin(ShapeType.Filled);
		Global.screenShapes.setColor(0.03f, 0.03f, 0.03f, 1f);
		Global.screenShapes.rect(275, 255, WIDTH/2 - 15, HEIGHT - 10);
		Global.screenShapes.end();
		

		Global.screenShapes.begin(ShapeType.Line);
		Global.screenShapes.setColor(Color.DARK_GRAY);
		Global.screenShapes.rect(270, 270, WIDTH, HEIGHT);
		Global.screenShapes.line(440, 350, 620, 350);
		Global.screenShapes.line(440, 250, 440, 550);
		Global.screenShapes.end();

		spriteBatch.begin();
		spriteBatch.draw(model, 845, 355);
		
		for(int i=0; i<items.size(); i++){
			font.draw(spriteBatch, items.get(i).getName(), 270, 540 - i*15);
			collisions.get(i).setPosition(270, 526 - i*15);
		}
		if(hover != null){
			spriteBatch.draw(hover.getTexture(), 480, 300);
			font.draw(spriteBatch, hover.getName(), 520, 320);
			font.draw(spriteBatch, "Value: " + hover.getValue(), 460, 280);
			font.draw(spriteBatch, "Weight: " + hover.getWeight(), 535, 280);
			hover = null;
		}
		spriteBatch.end();
	}
	
	@Override
	public void setPosition(float x, float y){
		setX(x * tileWidth);
		setY(y * tileHeight);

		map.put(ID, this);
		map.setMark(ID, getX(), getY());
	}
}