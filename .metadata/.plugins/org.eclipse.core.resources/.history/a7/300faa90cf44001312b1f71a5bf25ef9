package com.peter.rogue.entities;

import java.util.List;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.peter.rogue.Global;

public class Worm extends Monster{

	private float multiplyDelay;
	private boolean fertile;
	
	public Worm(String filename) {
		super(filename, "Worm");
		
		stats.setLevel(1);
		stats.setHitpoints(20);
		stats.setDexterity(5);
		stats.setStrength(2);
		stats.setExperience(0);

		message = "*Gurgle*";

		list.addType("Citizen");
		list.addType("Shopkeep");
		list.addType("Player");
		
		multiplyDelay = Global.rand(6, 0);
		
		if(Global.rand(3, 0) == 0)
			fertile = true;
		else
			fertile = false;
	}
	
	public void draw(SpriteBatch spriteBatch){
		super.draw(spriteBatch);
		update(Gdx.graphics.getDeltaTime());
	}
	
	
	
	private List<Pair> open;
	private List<Pair> closed; // 0 up. 1 down. 2 left. 3 right.
	float tempX, tempY;
	public void findPath(float x, float y){
		// Gets the first square and all of the options around it
		open.add(new Pair(getX(), getY()));
		for(float i=getX()-32; i<getX()+32; i+=32)
			for(float j=getY()-32; j<getY()+32; j+=32)
				if(!map.getTile(i, j).isBlocked() && (i != getX() && j != getY()))
					open.add(new Pair(i, j));
		closed.add(open.get(0));
		
		
		for(int i=0; i<open.size(); i++){
			tempX = open.get(i).x;
			tempY = open.get(i).y;
			while(tempX != x && tempY != y){
				if(x == tempX){
					if(y > tempY){
						tempY += 32;
						open.get(i).H++;
					}
					else{
						tempY -= 32;
						open.get(i).H++;
					}
				}
				else if(x > open.get(i).x){
					tempX += 32;
					open.get(i).H++;
				}
				else{
					tempX -= 32;
					open.get(i).H++;
				}
			}

			tempX = open.get(i).x;
			tempY = open.get(i).y;
			
			
		}
	}
	
	
	
	
	
	public void update(float delta){
		super.update(delta);
		
		if(fertile){
			multiplyDelay += delta;
			
			if(multiplyDelay >= 35){
				multiplyDelay = 0;
				multiply();
			}
		}
	}
	
	public void multiply(){
		npcs.add(new Worm("tilda.png"));
		npcs.get(npcs.size()-1).setPosition(Global.rand(3, (int)(this.getX()/32)-1), Global.rand(3, (int)(this.getY()/32)-1));
	}
}

class Pair{
	float x, y;
	int F, G, H;
	public Pair(float x, float y){
		this.x = x;
		this.y = y;
		F = H = G = 0;
	}
}