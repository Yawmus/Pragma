package com.peter.rogue.inventory;

import java.util.ArrayList;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Buttons;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.math.Vector3;
import com.peter.rogue.Global;
import com.peter.rogue.entities.Entity;
import com.peter.rogue.entities.Player;
import com.peter.rogue.entities.Shopkeep;

public class Inventory {
	
	
	private Backpack backpack = new Backpack();
	private ArrayList<Item> items;
	private ArrayList<Rectangle> collisions;
	private Gear gear;
	private int weight;
	private int wallet;
	private Item hover;
	private Rectangle hoverCollision;
	public static final int BOX1_WIDTH = 150, BOX2_WIDTH = 165, HEIGHT = 300, WIDTH = 500;
	public static final int ORIGIN_X = 670, ORIGIN_Y = 250;
	private Entity trade;
	
	public Inventory(){
		backpack = Backpack.SMALL;
		items = new ArrayList<Item>();
		collisions = new ArrayList<Rectangle>();
		gear = new Gear(ORIGIN_X + BOX1_WIDTH + BOX2_WIDTH, ORIGIN_Y);
		
		wallet = 0;
		add(Wearable.HAT);
		add(Wearable.BREAST_PLATE);
		add(Wearable.SHOES);
		add(Food.BREAD);
		add(Food.MEAT);
		add(Food.BREAD);
		add(Food.BREAD);
	}
	
	public boolean checkIsFull(Item item){
		if(item.getWeight() + weight > backpack.getCapacity())
			return true;
		return false;
	}
	
	public void add(Item item){
		if(!checkIsFull(item)){
			weight += item.getWeight();
			collisions.add(new Rectangle());
			collisions.get(collisions.size()-1).setSize(130, 15);
			items.add(item);
		}
		else
			System.out.println("Backpack full!");
	}
	public Item remove(int i){
		weight -= items.get(i).getWeight();
		return items.remove(i);
	}
	public void display(SpriteBatch spriteBatch, BitmapFont font, Vector2 screenCoord, Player player){
		Global.screenShapes.begin(ShapeType.Filled);
		Global.screenShapes.setColor(0f, 0f, 0f, 1f);
		Global.screenShapes.rect(ORIGIN_X, ORIGIN_Y, WIDTH, HEIGHT);
		Global.screenShapes.setColor(0.1f, 0.1f, 0.1f, 1f);
		Global.screenShapes.rect(ORIGIN_X + 5, ORIGIN_Y + 5, BOX1_WIDTH - 10, HEIGHT - 10);
		Global.screenShapes.end();
		
		Global.screenShapes.begin(ShapeType.Line);
		Global.screenShapes.setColor(Color.DARK_GRAY);
		Global.screenShapes.rect(ORIGIN_X, ORIGIN_Y, WIDTH, HEIGHT);
		Global.screenShapes.line(ORIGIN_X + BOX1_WIDTH + BOX2_WIDTH, ORIGIN_Y + HEIGHT - 60, ORIGIN_X + BOX1_WIDTH + BOX2_WIDTH, ORIGIN_Y);
		Global.screenShapes.line(ORIGIN_X + BOX1_WIDTH, ORIGIN_Y + 100, ORIGIN_X + BOX1_WIDTH + BOX2_WIDTH, ORIGIN_Y + 100);
		Global.screenShapes.line(ORIGIN_X + BOX1_WIDTH, ORIGIN_Y + HEIGHT - 60, ORIGIN_X + WIDTH, ORIGIN_Y + HEIGHT - 60);
		Global.screenShapes.line(ORIGIN_X + BOX1_WIDTH, ORIGIN_Y, ORIGIN_X + 150, HEIGHT + 250);
		Global.screenShapes.end();


		if(hover != null){
			spriteBatch.begin();
			spriteBatch.draw(hover.getTexture(), ORIGIN_X + 185, ORIGIN_Y + 50);
			font.draw(spriteBatch, hover.getName(), ORIGIN_X + 225, ORIGIN_Y + 70);
			font.draw(spriteBatch, "Value: " + hover.getValue(), ORIGIN_X + 170, ORIGIN_Y + 30);
			font.draw(spriteBatch, "Weight: " + hover.getWeight(), ORIGIN_X + 235, ORIGIN_Y + 30);
			spriteBatch.end();
			Global.screenShapes.begin(ShapeType.Filled);
			Global.screenShapes.setColor(.2f, .2f, .2f, 1f);
			Global.screenShapes.rect(hoverCollision.x, hoverCollision.y, hoverCollision.width, hoverCollision.height);
			Global.screenShapes.end();
			hover = null;
		}
		
		
		spriteBatch.begin();
		font.draw(spriteBatch, "    Speed: " + 30, ORIGIN_X + 190, ORIGIN_Y + 225);
		font.draw(spriteBatch, " Strength: " + player.getStats().getStrength(), ORIGIN_X + 190, ORIGIN_Y + 205);
		font.draw(spriteBatch, "    Health: " + player.getStats().getMaxHitpoints(), ORIGIN_X + 190, ORIGIN_Y + 185);
		font.draw(spriteBatch, " Defense: " + 2, ORIGIN_X + 190, ORIGIN_Y + 165);
		font.draw(spriteBatch, "Dexterity: " + player.getStats().getDexterity(), ORIGIN_X + 190, ORIGIN_Y + 145);
		font.draw(spriteBatch, "  Points: " + player.getStats().getPoints(), ORIGIN_X + 200, ORIGIN_Y + 125);
		
		if(player.getStats().getPoints() > 0)
			for(int i=0; i<5; i++)
				font.draw(spriteBatch, "+", ORIGIN_X + 285, ORIGIN_Y + 145 + i*15);
		
		font.draw(spriteBatch, "Hunger   " + (int)(player.getHunger()*100) + "%", ORIGIN_X + WIDTH - 120, ORIGIN_Y + HEIGHT - 15);
		font.draw(spriteBatch, "Thirst        " + "90%", ORIGIN_X + WIDTH - 120, ORIGIN_Y + HEIGHT - 30);
		font.draw(spriteBatch, "Wallet  " + wallet, ORIGIN_X + BOX1_WIDTH + 10, ORIGIN_Y + HEIGHT - 15);
		font.draw(spriteBatch, "Weight " + weight + "/" + backpack.getCapacity(), ORIGIN_X + BOX1_WIDTH + 10, ORIGIN_Y + HEIGHT - 30);
		
		gear.draw(spriteBatch);
		
		for(int i=0; i<items.size(); i++){
			font.draw(spriteBatch, items.get(i).getName(), ORIGIN_X + 10, (ORIGIN_Y + HEIGHT - 10) - i*15);
			collisions.get(i).setPosition(ORIGIN_X + 10, (ORIGIN_Y + HEIGHT - 24) - i*15);
		}

		spriteBatch.end();
		
		// Uncomment shape rendering for item collision debug
		/*Gdx.gl.glEnable(GL10.GL_BLEND);
        Gdx.gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
		Global.screenShapes.begin(ShapeType.Filled);
		Global.screenShapes.setColor(0f, 1f, 1f, .4f);
		*/

		// Item-mouse collision
		for(int i=0; i<getItems().size(); i++){
			//Global.screenShapes.rect(collisions.get(i).x, collisions.get(i).y, 130, 15);
			if(collisions.get(i).contains(screenCoord)){
				setHover(getItems().get(i), collisions.get(i));
				if(items.get(i) instanceof Food){
					Vector3 coord = new Vector3(Gdx.input.getX(), Gdx.input.getY(), 0);
					Global.camera.unproject(coord);
					Global.mapShapes.begin(ShapeType.Filled);
					Global.mapShapes.setColor(0f, 0, 0, 1f);
					Global.mapShapes.rect(coord.x, coord.y, Global.font.getBounds("eat").width, Global.font.getLineHeight());
					Global.mapShapes.end();
					Entity.map.getSpriteBatch().begin();
					
					Global.font.draw(Entity.map.getSpriteBatch(), "eat", coord.x, coord.y + Global.font.getLineHeight() - 2);
					Entity.map.getSpriteBatch().end();
					
					if(Gdx.input.isButtonPressed(Buttons.RIGHT) && Gdx.input.justTouched()){
						player.mutateHunger(.1f);
						remove(i);
					}
				}
				else if(items.get(i) instanceof Wearable){
					Vector3 coord = new Vector3(Gdx.input.getX(), Gdx.input.getY(), 0);
					Global.camera.unproject(coord);
					Global.mapShapes.begin(ShapeType.Filled);
					Global.mapShapes.setColor(0f, 0, 0, 1f);
					Global.mapShapes.rect(coord.x, coord.y, Global.font.getBounds("wear").width, Global.font.getLineHeight());
					Global.mapShapes.end();
					Entity.map.getSpriteBatch().begin();
					
					Global.font.draw(Entity.map.getSpriteBatch(), "wear", coord.x, coord.y + Global.font.getLineHeight() - 2);
					Entity.map.getSpriteBatch().end();
					
					if(Gdx.input.isButtonPressed(Buttons.RIGHT) && Gdx.input.justTouched()){
						gear.wear((Wearable) items.get(i));
						remove(i);
					}
				}
				if(Gdx.input.isButtonPressed(Buttons.LEFT) && Gdx.input.justTouched()){
					if(trade != null){
						// In essence -> sells the item, then adds it to shopkeep's inventory
						if(trade instanceof Shopkeep){
							wallet += getItems().get(i).getValue();
							((Shopkeep) trade).add(remove(i));
						}
						// In essence -> adds item to chest and removes from inventory
						else if(trade instanceof Chest)
							((Chest) trade).add(remove(i));
					}
				}
			}
		}
		/*Global.screenShapes.end();
	    Gdx.gl.glDisable(GL10.GL_BLEND);*/
		
		setHover(gear.check(screenCoord));
	}
	
	

	public Texture getBackpack(){
		return backpack.getTexture();
	}
	public boolean isItem(){
		if(hover == null)
			return false;
		return true;
	}
	public void setHover(Item hover, Rectangle collision){
		this.hover = hover;
		this.hoverCollision = collision;
	}
	
	public ArrayList<Item> getItems(){
		return items;
	}

	public int getWallet() {
		return wallet;
	}

	public void setWallet(int wallet) {
		this.wallet = wallet;
	}
	
	public void mutateWallet(int amount) {
		this.wallet += amount;
	}

	// These are assigned to whomever you are trading with
	public Entity getTrade() {
		return trade;
	}

	public void setTrade(Entity trade) {
		this.trade = trade;
	}
}

class Gear{
	private Wearable head, body, legs, feet, arms;
	private ArrayList<Texture> unused;
	private final int SLOTS = 5;
	private Equipable leftHand, rightHand;
	private int originX, originY;
	private ArrayList<Rectangle> collisions;
	public Gear(int originX, int originY){
		collisions = new ArrayList<Rectangle>();
		
		this.originX = originX;
		this.originY = originY;
		
		unused.add(new Texture(Gdx.files.internal("img/head.png")));
		unused.add(new Texture(Gdx.files.internal("img/arms.png")));
		unused.add(new Texture(Gdx.files.internal("img/body.png")));
		unused.add(new Texture(Gdx.files.internal("img/legs.png")));
		unused.add(new Texture(Gdx.files.internal("img/feet.png")));
		
		for(int i=0; i<SLOTS; i++){
			collisions.add(new Rectangle());
			collisions.get(i).setSize(32, 32);
		}

		collisions.get(0).setPosition(originX + 80, originY + 165);
		collisions.get(1).setPosition(originX + 80, originY + 125);
		collisions.get(2).setPosition(originX + 120, originY + 85);
		collisions.get(3).setPosition(originX + 80, originY + 85);
		collisions.get(4).setPosition(originX + 80, originY + 45);
	}
	public Item check(Vector2 screenCoord) {
		for(int i=0; i<SLOTS; i++){
			if(collisions.get(i).contains(screenCoord)){
				System.out.println("HI!");
			}
		}
		return null;
	}
	public void draw(SpriteBatch spriteBatch) {
		spriteBatch.draw(head != null ? head.getTexture() : unusedHead, originX + 80, originY + 165);
		spriteBatch.draw(body != null ? body.getTexture() : unusedBody, originX + 80, originY + 125);
		spriteBatch.draw(arms != null ? arms.getTexture() : unusedArms, originX + 120, originY + 85);
		spriteBatch.draw(legs != null ? body.getTexture() : unusedLegs, originX + 80, originY + 85);
		spriteBatch.draw(feet != null ? feet.getTexture() : unusedFeet, originX + 80, originY + 45);
	}
	
	public void wear(Wearable item){
		if(item.getType() == "Head")
			head = item;
		if(item.getType() == "Torso")
			body = item;
		if(item.getType() == "Arms")
			arms = item;
		if(item.getType() == "Legs")
			legs = item;
		if(item.getType() == "Feet")
			feet = item;
	}
	public void equip(Equipable item){
		leftHand = item;
	}
}