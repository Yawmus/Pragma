package com.peter.rogue.network;

import java.util.HashMap;

import com.badlogic.gdx.graphics.Color;
import com.esotericsoftware.kryonet.Connection;
import com.esotericsoftware.kryonet.Listener;
import com.peter.entities.Entity;
import com.peter.entities.EntityManager;
import com.peter.entities.MPPlayer;
import com.peter.entities.NPC;
import com.peter.entities.Shopkeep;
import com.peter.inventory.Chest;
import com.peter.inventory.Item;
import com.peter.map.Marks;
import com.peter.packets.AddNPCPacket;
import com.peter.packets.AddPlayerPacket;
import com.peter.packets.AddTradeItemPacket;
import com.peter.packets.AttackPacket;
import com.peter.packets.ChestPacket;
import com.peter.packets.ExperiencePacket;
import com.peter.packets.IDPacket;
import com.peter.packets.ItemPacket;
import com.peter.packets.MapPacket;
import com.peter.packets.MessagePacket;
import com.peter.packets.NPCPacket;
import com.peter.packets.PlayerPacket;
import com.peter.packets.RemoveItemPacket;
import com.peter.packets.RemoveNPCPacket;
import com.peter.packets.RemovePlayerPacket;
import com.peter.packets.RemoveTradeItemPacket;
import com.peter.packets.RequestFloorPacket;
import com.peter.rogue.screens.Play;
import com.peter.rogue.views.UI;
import com.peter.rogue.views.UI.Entry;

public class Network extends Listener {
	public void connected(Connection c) {
		EntityManager.player.setID(c.getID());
	}
	public void received(Connection c, Object o){
		if(o instanceof MessagePacket){
			MessagePacket packet = (MessagePacket) o;
			while(packet.floor > Play.map.players.size()-1)
				Play.map.players.add(new HashMap<Integer, MPPlayer>());
			if(Play.map.players.get(packet.floor).containsKey(packet.receiverID)){
				Play.map.players.get(packet.floor).get(packet.receiverID).setMessage(packet.message);
				UI.messageList.add(new Entry(packet.message, Play.map.players.get(packet.floor).get(packet.receiverID).getName()));
			}
			else if(Play.map.npcs.containsKey(packet.receiverID))
				Play.map.npcs.get(packet.receiverID).setMessage(packet.message);
		}
		else if(o instanceof RemoveItemPacket){
			RemoveItemPacket packet = (RemoveItemPacket) o;
			Play.map.marks.put(-1, packet.x, packet.y);
			Play.map.database.remove(packet.ID);
			Play.map.getTile(packet.x, packet.y).remove(packet.ID);
		}
		else if(o instanceof AddPlayerPacket){
			AddPlayerPacket packet = (AddPlayerPacket) o;
			EntityManager.playerQueue.add(packet);
		}
		else if(o instanceof RemovePlayerPacket){
			RemovePlayerPacket packet = (RemovePlayerPacket) o;
			Play.map.marks.find(packet.ID, -1);
			Play.map.database.remove(packet.ID);
			for(int i=0; i<Play.map.players.size(); i++)
				if(Play.map.players.get(i).containsKey(packet.ID)){
					Play.map.players.get(i).remove(packet.ID);
					break;
				}
		}
		else if(o instanceof PlayerPacket){
			PlayerPacket packet = (PlayerPacket) o;
			Play.map.players.get(packet.floor).get(packet.ID).setX(packet.x);
			Play.map.players.get(packet.floor).get(packet.ID).setY(packet.y);
			Play.map.players.get(packet.floor).get(packet.ID).setOldX(packet.oldX);
			Play.map.players.get(packet.floor).get(packet.ID).setOldY(packet.oldY);
			if(Play.map.getFloor() == packet.floor){
				Play.map.marks.put(packet.ID, packet.x, packet.y);
				Play.map.marks.put(-1, packet.oldX, packet.oldY);
			}
		}
		
		else if(o instanceof NPCPacket){
			NPCPacket packet = (NPCPacket) o;
			if(Play.map.npcs.get(packet.ID) != null){
				Play.map.npcs.get(packet.ID).setX(packet.x);
				Play.map.npcs.get(packet.ID).setY(packet.y);
				Play.map.marks.put(packet.ID, packet.x, packet.y);
				Play.map.npcs.get(packet.ID).setOldX(packet.oldX);
				Play.map.npcs.get(packet.ID).setOldY(packet.oldY);
				Play.map.marks.put(-1, packet.oldX, packet.oldY);
			}
		}
		else if(o instanceof AddNPCPacket){
			AddNPCPacket packet = (AddNPCPacket) o;
			EntityManager.NPCQueue.add(packet);
		}
		else if(o instanceof RemoveNPCPacket){
			RemoveNPCPacket packet = (RemoveNPCPacket) o;
			Play.map.marks.put(-1, (int) Play.map.npcs.get(packet.ID).getX(), (int) Play.map.npcs.get(packet.ID).getY());
			//Animate.animations.load("death", (int) Play.map.npcs.get(packet.ID).getX(), (int) Play.map.npcs.get(packet.ID).getY());
			Play.map.database.remove(packet.ID);
			Play.map.npcs.remove(packet.ID);
		}
		else if(o instanceof RequestFloorPacket){
			RequestFloorPacket packet = (RequestFloorPacket) o;
			
			if(Play.map.players.size() > Play.map.getFloor())
				Play.map.players.add(new HashMap<Integer, MPPlayer>());
			
			Play.map.players.get(packet.floor).put(packet.ID, Play.map.players.get(packet.prevFloor).remove(packet.ID));
			
			if(packet.floor == Play.map.getFloor()){
				Play.map.database.put(packet.ID, Play.map.players.get(packet.floor).get(packet.ID));
				Play.map.marks.put(packet.ID, packet.x, packet.y);
			}
		}
		else if(o instanceof MapPacket){
			Play.map.chests = new HashMap<Integer, Chest>();
			Play.map.npcs = new HashMap<Integer, NPC>();
			Play.map.marks = new Marks();
			
			MapPacket packet = (MapPacket) o;
			Play.map.marks.setMarker(packet.marks);
			Play.map.marks.put(c.getID(), (int) EntityManager.player.getX(), (int) EntityManager.player.getY());
			
			for(int x=0; x<Play.map.WIDTH; x++)
				for(int y=0; y<Play.map.HEIGHT; y++){
					Play.map.initTiles[x][y] = packet.tiles[x][y];
					Play.map.initTints[x][y] = packet.tints[x][y];
				}
			Play.map.initialize = true;
			
			for(ChestPacket chest : packet.chests.values())
				EntityManager.chestQueue.add(chest);
			for(AddNPCPacket npc : packet.npcs.values())
				EntityManager.NPCQueue.add(npc);
			
			Play.map.database = new HashMap<Integer, Entity>();
			Play.map.database.put(c.getID(), EntityManager.player);
			for(MPPlayer mpPlayer : Play.map.players.get(Play.map.getFloor()).values()){
				Play.map.database.put(mpPlayer.ID, mpPlayer);
				Play.map.marks.put(mpPlayer.ID, (int) mpPlayer.getX(), (int) mpPlayer.getY());
			}
		}
		else if(o instanceof RemoveTradeItemPacket){
			RemoveTradeItemPacket packet = (RemoveTradeItemPacket) o;
			if(Play.map.chests.containsKey(packet.ID))
				Play.map.chests.get(packet.ID).items.remove(packet.index);
			else if(Play.map.npcs.containsKey(packet.ID))
				((Shopkeep) Play.map.npcs.get(packet.ID)).items.remove(packet.index);
		}
		else if(o instanceof AddTradeItemPacket){
			AddTradeItemPacket packet = (AddTradeItemPacket) o;
			EntityManager.tradeItemQueue.add(packet);
		}
		else if(o instanceof ItemPacket){
			ItemPacket packet = (ItemPacket) o;
			EntityManager.itemQueue.add(packet);
		}
		else if(o instanceof ExperiencePacket){
			ExperiencePacket packet = (ExperiencePacket) o;
			EntityManager.player.getStats().mutateExperience(packet.amount);
			if(!packet.group.equals("Monster"))
				EntityManager.player.setAlert("You killed " + packet.name + "!", false);
		}
		else if(o instanceof AttackPacket){
			AttackPacket packet = (AttackPacket) o;
			if(Play.map.npcs.containsKey(packet.receiverID))
				Play.map.npcs.get(packet.receiverID).setStatus(packet.amount);
			else if(Play.map.players.get(packet.floor).containsKey(packet.receiverID))
				Play.map.players.get(packet.floor).get(packet.receiverID).setStatus(packet.amount);
			else{
				EntityManager.player.getStats().mutateHitpoints(packet.amount);
				EntityManager.player.setStatus(packet.amount);
			}
		}
		else if(o instanceof IDPacket){
			IDPacket packet = (IDPacket) o;
			EntityManager.player.ID = packet.ID;
		}
	}
	public void disconnected (Connection connection) {
	}
}
