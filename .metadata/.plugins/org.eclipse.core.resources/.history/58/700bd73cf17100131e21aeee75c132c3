package com.peter.map;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

import com.badlogic.gdx.math.Vector2;
import com.peter.entities.Citizen;
import com.peter.entities.Entity;
import com.peter.entities.Monster;
import com.peter.entities.NPC;
import com.peter.entities.Player;
import com.peter.entities.Shopkeep;
import com.peter.packets.ChestPacket;
import com.peter.packets.ItemPacket;
import com.peter.server.Global;

public class Map{
    public HashMap<Short, Entity> database;
    public static final int HEIGHT = 40;
	public static final int WIDTH = 80;
	public HashMap<Integer, Player> players;
	public static ArrayList<Marks> markSets;

	private static Stack<Vector2> roomLocations = new Stack<Vector2>();
	private static Data data = new Data();
	
	public static ArrayList<Tile[][]> tileSets;
	public static ArrayList<String[][]> tintSets;
	public static ArrayList<HashMap<Integer, ChestPacket>> chestSets;
	public static ArrayList<HashMap<Integer, ItemPacket>> itemSets;
	public static ArrayList<HashMap<Integer, NPC>> npcSets;
	
	public static Queue<ItemPacket> ItemQueue;
	public static Queue<ChestPacket> ChestQueue;
	public static Queue<NPC> NPCQueue;
	
	public Map(){
		database = new HashMap<Short, Entity>();
		players = new HashMap<Integer, Player>();

		tileSets = new ArrayList<Tile[][]>();
		tintSets = new ArrayList<String[][]>();
		chestSets = new ArrayList<HashMap<Integer, ChestPacket>>();
		itemSets = new ArrayList<HashMap<Integer, ItemPacket>>();
		npcSets = new ArrayList<HashMap<Integer, NPC>>();
		markSets = new ArrayList<Marks>();
		
		ItemQueue = new LinkedList<ItemPacket>();
		ChestQueue = new LinkedList<ChestPacket>();
		NPCQueue = new LinkedList<NPC>();


		tileSets.add(new Tile[WIDTH][HEIGHT]);
		tintSets.add(new String[WIDTH][HEIGHT]);

		itemSets.add(new HashMap<Integer, ItemPacket>());
		chestSets.add(new HashMap<Integer, ChestPacket>());
		npcSets.add(new HashMap<Integer, NPC>());
		markSets.add(new Marks());
		
		baseFloor();
	}
	
	public Tile getTile(int floor, float x, float y){
		if(y < 0 || x < 0 || y/32 >= HEIGHT || x/32 >= WIDTH)
			return Tile.BLANK;
		return tileSets.get(floor)[(int)(x/32)][(int)(y/32)];
	}
	
	private void generateTerrain(Tile[][] tileSet, Tile tile, int x, int y){
		if(x <= 0 || x + 1 >= WIDTH || y <= 0 || y + 1 >= HEIGHT)
			return;
		if(tileSet[x][y] == tile || tileSet[x][y] == Tile.WALL)
			return;
		tileSet[x][y] = tile;
		
		for(int i=0; i<4; i++)
			switch(Global.rand(7, 0)){
			case 0:
				generateTerrain(tileSet, tile, x+1, y);
				break;
			case 1:
				generateTerrain(tileSet, tile, x-1, y);
				break;
			case 2:
				generateTerrain(tileSet, tile, x, y+1);
				break;
			case 3:
				generateTerrain(tileSet, tile, x, y-1);
				break;
			}
	}

	private void baseFloor(){
		int seaX = WIDTH-8, seaY = 1;
		Store store;
		House house;
		for(int x=0; x<WIDTH; x++)
			for(int y=0; y<HEIGHT; y++){
				if(y == 0 || y == HEIGHT-1 || x == 0 || x == WIDTH-1)
					tileSets.get(0)[x][y] = Tile.WALL;
				else{
					tileSets.get(0)[x][y] = Tile.GROUND;
				}
			}
		
		for(int i=0; i<3; i++)
			generateTerrain(tileSets.get(0), Tile.GRASS, Global.rand(WIDTH-2, 1), Global.rand(HEIGHT-2, 1));
		
		for(int y=seaY; y<HEIGHT-1; y++)
			for(int x=Global.rand(3, seaX-7); x<WIDTH; x++){
				tileSets.get(0)[x][y] = Tile.GROUND;
				tintSets.get(0)[x][y] = "Sand";
			}
		for(int y=seaY; y<HEIGHT-1; y++)
			for(int x=Global.rand(3, seaX-3); x<WIDTH; x++)
					tileSets.get(0)[x][y] = Tile.WATER;
		
		
		store = new Store(seaX-11, HEIGHT-12);
		store.write(tileSets.get(0), tintSets.get(0), 0, Shopkeep.Armorer);
		store = new Store(seaX-11, 6);
		store.write(tileSets.get(0), tintSets.get(0), 0, Shopkeep.Fletcher);
		store = new Store(12, 9);
		store.write(tileSets.get(0), tintSets.get(0), 0, Shopkeep.Blacksmith);

		house = new House(30, 18);
		house.write(tileSets.get(0), tintSets.get(0), 0);

		for(int x=WIDTH/2-1; x<=WIDTH/2+1; x++)
			for(int y=HEIGHT/2-1; y<=HEIGHT/2+1; y++)
				tileSets.get(0)[x][y] = Tile.WATER;
		
		for(int y=0; y<HEIGHT-1; y++)
			tileSets.get(0)[WIDTH-1][y] = Tile.BLANK;
		
		tileSets.get(0)[24][8] = Tile.DOWN;
		
		ItemPacket temp;
		ChestPacket temp2;
		NPC temp3;
		
		// Populates floor 0 only
		Map.itemSets.get(0).put(++Global.count, new ItemPacket("Ring", 30, 8, Global.count));
		temp = Map.itemSets.get(0).get(Global.count);
		Map.markSets.get(0).put(temp.ID, temp.x * 32, temp.y * 32);

		Map.itemSets.get(0).put(++Global.count, new ItemPacket("Hat", 32, 8, Global.count));
		temp = Map.itemSets.get(0).get(Global.count);
		Map.markSets.get(0).put(temp.ID, temp.x * 32, temp.y * 32);

		Map.chestSets.get(0).put(++Global.count, new ChestPacket("Chest", 32, 7, Global.count));
		temp2 = Map.chestSets.get(0).get(Global.count);
		Map.markSets.get(0).put(temp2.ID, temp2.x * 32, temp2.y * 32);
		
		for(int i=0; i<data.getCitizens(); i++){
			temp3 = new Citizen(0);
			temp3.ID = ++Global.count;
			temp3.setPosition(Global.rand(30, 28), Global.rand(13, 5));
			Map.npcSets.get(0).put(Global.count, temp3);
			Map.markSets.get(0).put(temp3.ID, temp3.getX(), temp3.getY());
		}
		for(int i=0; i<data.getMonsters(); i++){
			temp3 = new Monster(0, "Worm");
			temp3.ID = ++Global.count;
			temp3.setPosition(Global.rand(30, 28), Global.rand(9, 5));
			Map.npcSets.get(0).put(Global.count, temp3);
			Map.markSets.get(0).put(temp3.ID, temp3.getX(), temp3.getY());
		}
		
		addEntities(0);
	}
	
	public Tile[][] generateFloor(int floor, int x, int y){
		if(tileSets.size() > floor)
			return tileSets.get(floor);
		Tile[][] tileSet = new Tile[WIDTH][HEIGHT];
		tintSets.add(new String[WIDTH][HEIGHT]);
		Map.npcSets.add(new HashMap<Integer, NPC>());
		Map.chestSets.add(new HashMap<Integer, ChestPacket>());
		Map.itemSets.add(new HashMap<Integer, ItemPacket>());
		Map.markSets.add(new Marks());
		
		for(int i=0; i<WIDTH; i++)
			for(int j=0; j<HEIGHT; j++)
				tileSet[i][j] = Tile.BLANK;
		Chamber chamber = new Chamber(x, y, 10, 6, floor);
		generateRoom(tileSet, tintSets.get(floor), floor, chamber);
		tileSet[x][y] = Tile.UP;
		
		for(int i=0; i<WIDTH-1; i++)
			for(int j=0; j<HEIGHT-1; j++){
				if(tileSet[i][j] == Tile.GROUND && tileSet[i+1][j] == Tile.BLANK)
					tileSet[i+1][j] = Tile.WALL;
				if(tileSet[i][j] == Tile.GROUND && tileSet[i][j+1] == Tile.BLANK)
					tileSet[i][j+1] = Tile.WALL;
			}
		for(int i=1; i<WIDTH; i++)
			for(int j=1; j<HEIGHT; j++){
				if(tileSet[i][j] == Tile.GROUND && tileSet[i-1][j] == Tile.BLANK)
					tileSet[i-1][j] = Tile.WALL;
				if(tileSet[i][j] == Tile.GROUND && tileSet[i][j-1] == Tile.BLANK)
					tileSet[i][j-1] = Tile.WALL;
			}
		
		
		// Adds the exit in the floor
		if(!roomLocations.isEmpty()){
			Vector2 furthest = null;
			double furthestValue = 0;
			while(!roomLocations.isEmpty()){
				double currentValue = Math.sqrt(Math.pow(x - roomLocations.peek().x, 2) + Math.pow(y - roomLocations.peek().y, 2));
				if(currentValue > furthestValue){
					furthest = roomLocations.pop();
					furthestValue = Math.sqrt(Math.pow(x - furthest.x, 2) + Math.pow(y - furthest.y, 2));
				}
				else
					roomLocations.pop();
			}
			tileSet[(int) furthest.x][(int) furthest.y] = Tile.DOWN;
		}
		// End of the dungeon!
		
		tileSets.add(tileSet);
		addEntities(floor);
		
		return tileSet;
	}
	
	private void addEntities(int floor){
		while(!NPCQueue.isEmpty())
			Map.npcSets.get(floor).put(NPCQueue.peek().ID, NPCQueue.remove());
		while(!ItemQueue.isEmpty())
			Map.itemSets.get(floor).put(ItemQueue.peek().ID, ItemQueue.remove());
		while(!ChestQueue.isEmpty())
			Map.chestSets.get(floor).put(ChestQueue.peek().ID, ChestQueue.remove());
	}
	
	private boolean scanRoom(Tile[][] tileSet, Room room){
		for(int i=(room.x-room.width/2 + 1); i<(room.x+room.width/2); i++)
			for(int j=(room.y-room.height/2 + 1); j<(room.y+room.height/2); j++)
				if(!tileSet[i][j].equals(Tile.BLANK))
					return false;
		return true;
	}
	
	private boolean generateRoom(Tile[][] tileSet, String[][] tintSet, int floor, Chamber chamber){
		if(chamber.x-chamber.width/2 < 0 || chamber.x+chamber.width/2 >= WIDTH || chamber.y-chamber.height/2 < 0 || chamber.y+chamber.height/2 >= HEIGHT)
			return false;
		if(!scanRoom(tileSet, chamber))
			return false;
		Chamber chamber2 = new Chamber(floor);
		
		chamber.write(tileSet, tintSet);
		int times = 0;
		while(times < 4){
			Hall hall = new Hall();
			switch(Global.rand(4, 0)){
			case 0: // up
				hall.x = chamber.x + Global.rand(chamber.width-2, -(chamber.width/2-1));
				hall.y = chamber.y + chamber.height/2;
				hall.dx = chamber.x + Global.rand(chamber.width-1, -(chamber.width/2-1));
				hall.dy = chamber.y + chamber.height/2 + Global.rand(5, 0);
				chamber2.x = hall.dx + Global.rand(3, -1);
				chamber2.y = hall.dy + chamber2.height/2;
				if(generateRoom(tileSet, tintSet, floor, chamber2)){
					hall.write(tileSet, tintSet, "up");
					roomLocations.add(new Vector2(chamber2.x, chamber2.y));
				}
				break;
			case 1: // down
				hall.x = chamber.x + Global.rand(chamber.width-2, -(chamber.width/2-1));
				hall.y = chamber.y - chamber.height/2;
				hall.dx = chamber.x + Global.rand(chamber.width-1, -(chamber.width/2-1));
				hall.dy = chamber.y - chamber.height/2 - Global.rand(5, 0);
				chamber2.x = hall.dx + Global.rand(3, -1);
				chamber2.y = hall.dy - chamber2.height/2;
				if(generateRoom(tileSet, tintSet, floor, chamber2)){
					hall.write(tileSet, tintSet, "down");
					roomLocations.add(new Vector2(chamber2.x, chamber2.y));
				}
				break;
			case 2: // right
				hall.x = chamber.x + chamber.width/2;
				hall.y = chamber.y + Global.rand(chamber.height-2, -(chamber.height/2-1));
				hall.dx = chamber.x + chamber.width/2 + Global.rand(5, 0);
				hall.dy = chamber.y + Global.rand(chamber.height-2, -(chamber.height/2-1));
				chamber2.x = hall.dx + chamber2.width/2;
				chamber2.y = hall.dy + Global.rand(3, -1);
				if(generateRoom(tileSet, tintSet, floor, chamber2)){
					hall.write(tileSet, tintSet, "right");
					roomLocations.add(new Vector2(chamber2.x, chamber2.y));
				}
				break;
			case 3: // left
				hall.x = chamber.x - chamber.width/2;
				hall.y = chamber.y + Global.rand(chamber.height-2, -(chamber.height/2-1));
				hall.dx = chamber.x - chamber.width/2 - Global.rand(5, 0);
				hall.dy = chamber.y + Global.rand(chamber.height-2, -(chamber.height/2-1));
				chamber2.x = hall.dx - chamber2.width/2;
				chamber2.y = hall.dy + Global.rand(3, -1);
				if(generateRoom(tileSet, tintSet, floor, chamber2)){
					hall.write(tileSet, tintSet, "left");
					roomLocations.add(new Vector2(chamber2.x, chamber2.y));
				}
				break;
			}
			times++;
		}
		return true;
	}
}

class Room{
	public Vector2 door;
	public int x, y, width, height;
	public static final int BASE_ROOM_WIDTH = 10, BASE_ROOM_HEIGHT = 6;
	
	public Room(){}
	public Room(int x, int y, int width, int height){
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		
		switch(Global.rand(4, 0)){
		case 0:
			door = new Vector2(this.x, this.y + this.height/2);
			break;
		case 1:
			door = new Vector2(this.x + this.width/2, this.y);
			break;
		case 2:
			door = new Vector2(this.x, this.y - this.height/2);
			break;
		case 3:
			door = new Vector2(this.x - this.width/2, this.y);
			break;
		}
	}
	public Room(int x, int y){
		this.x = x;
		this.y = y;
		this.width = BASE_ROOM_WIDTH;
		this.height = BASE_ROOM_HEIGHT;
		
		switch(Global.rand(4, 0)){
		case 0:
			door = new Vector2(this.x, this.y + this.height/2);
			break;
		case 1:
			door = new Vector2(this.x + this.width/2, this.y);
			break;
		case 2:
			door = new Vector2(this.x, this.y - this.height/2);
			break;
		case 3:
			door = new Vector2(this.x - this.width/2, this.y);
			break;
		}
	}
	
	public void write(Tile[][] tileSet){
		for(int i=(x-width/2 + 1); i<(x+width/2); i++)
			for(int j=(y-height/2 + 1); j<(y+height/2); j++){
				tileSet[i][j] = Tile.GROUND;
			}
		for(int i=(x-width/2); i<(x+width/2+1); i++)
			for(int j=(y-height/2); j<(y+height/2+1); j++)
				if(i == (x-width/2) || i == (x+width/2)
				   || j == (y-height/2) || j == (y+height/2)){
					tileSet[i][j] = Tile.WALL;
				}
	}
}

class Store extends Room{
	public Store(int x, int y) {
		super(x, y);
	}

	public void write(Tile[][] tileSet, String[][] tintSet, int floor, String type){
		super.write(tileSet);
		for(int i=(x-width/2 + 1); i<(x+width/2); i++)
			for(int j=(y-height/2 + 1); j<(y+height/2); j++){
				tintSet[i][j] = "Wood";
			}
		for(int i=(x-width/2); i<(x+width/2+1); i++)
			for(int j=(y-height/2); j<(y+height/2+1); j++)
				if(i == (x-width/2) || i == (x+width/2)
				   || j == (y-height/2) || j == (y+height/2)){
					tintSet[i][j] = "";
				}
		tileSet[(int) door.x][(int) door.y] = Tile.DOOR;
		
		ItemPacket temp;
		NPC temp2;
		
		temp2 = new Shopkeep(floor, type);
		temp2.ID = ++Global.count;
		temp2.setPosition((x + Global.rand(width-1, -(width/2-1))), (y + Global.rand(height-1, -(height/2-1))));
		Map.markSets.get(floor).put(temp2.ID, temp2.getX(), temp2.getY());
		Map.NPCQueue.add(temp2);
	}
}

class House extends Room{
	public House(int x, int y) {
		super(x, y);
	}

	public void write(Tile[][] tileSet, String[][] tintSet, int floor){
		super.write(tileSet);
		for(int i=(x-width/2 + 1); i<(x+width/2); i++)
			for(int j=(y-height/2 + 1); j<(y+height/2); j++){
				tintSet[i][j] = "Wood";
			}
		
		tileSet[(int) door.x][(int) door.y] = Tile.DOOR;
		
		ItemPacket temp;
		NPC temp2;
		
		temp2 = new Citizen(floor);
		temp2.ID = ++Global.count;
		temp2.setPosition((x + Global.rand(width-1, -(width/2-1))), (y + Global.rand(height-1, -(height/2-1))));
		Map.markSets.get(floor).put(temp2.ID, temp2.getX(), temp2.getY());
		Map.NPCQueue.add(temp2);
	}
}

class Chamber extends Room{
	int floor;
	public Chamber(int floor){
		this.width = BASE_ROOM_WIDTH + Global.rand(3, -3);
		this.height = BASE_ROOM_HEIGHT + Global.rand(5, -2);
		this.floor = floor;
	}
	
	public Chamber(int x, int y, int width, int height, int floor){
		super(x, y, width, height);
		this.floor = floor;
	}
	
	public void write(Tile[][] tileSet, String[][] tintSet){
		super.write(tileSet);
		Map.generateTerrain();
		for(int i=0; i<3; i++)
			populate(Global.rand(100, 0));
	}
	
	public void populate(int chance){
		ItemPacket temp;
		NPC temp2;
		if(chance < 1){
			temp2 = new Citizen(floor, Citizen.Serf);
			temp2.ID = ++Global.count;
			temp2.setPosition((x + Global.rand(width-1, -(width/2-1))), (y + Global.rand(height-1, -(height/2-1))));
			Map.markSets.get(floor).put(temp2.ID, temp2.getX(), temp2.getY());
			Map.NPCQueue.add(temp2);
		}
		else if(chance < 3){
			temp = new ItemPacket("Gem");
			switch(Global.rand(6, 0)){
			case 0:
				temp.type = "Diamond";
				break;
			case 1:
			case 2:
				temp.type = "Topaz";
				break;
			case 3:
			case 4:
				temp.type = "Ruby";
				break;
			case 5:
				temp.type = "Spessarite";
				break;
			}
			temp.ID = ++Global.count;
			temp.floor = floor;
			temp.x = (x + Global.rand(width-1, -(width/2-1)));
			temp.y = (y + Global.rand(height-1, -(height/2-1)));
			Map.markSets.get(floor).put(temp.ID,temp.x * 32, temp.y * 32);
			Map.ItemQueue.add(temp);
		}
		else if(chance < 8){
			for(int i=0; i<Global.rand(4, 1); i++){
				temp = new ItemPacket("Gold");
				temp.ID = ++Global.count;
				temp.floor = floor;
				temp.x = (x + Global.rand(width-1, -(width/2-1)));
				temp.y = (y + Global.rand(height-1, -(height/2-1)));
				Map.markSets.get(floor).put(temp.ID,temp.x * 32, temp.y * 32);
				Map.ItemQueue.add(temp);
			}
		}
		else if(chance < 20){
			temp2 = new Monster(floor, Monster.Worm);
			temp2.ID = ++Global.count;
			temp2.setPosition((x + Global.rand(width-1, -(width/2-1))), (y + Global.rand(height-1, -(height/2-1))));
			Map.markSets.get(floor).put(temp2.ID, temp2.getX(), temp2.getY());
			Map.NPCQueue.add(temp2);
		}
	}
}

class Hall{
	public int x, y, dx, dy;
	public Hall(){
	}
	public void write(Tile[][] tileSet, String[][] tintSet, String direction){
		int tempX = x, tempY = y;
		while(tempX != dx || tempY != dy){
			if(tempX == dx)
				if(dy - tempY > 0)
					tileSet[tempX][tempY++] = Tile.GROUND;
				else
					tileSet[tempX][tempY--] = Tile.GROUND;
			else if(tempY == dy)
				if(dx - tempX > 0)
					tileSet[tempX++][tempY] = Tile.GROUND;
				else
					tileSet[tempX--][tempY] = Tile.GROUND;
			else if(Math.abs(dx - tempX) < Math.abs(dy - tempY))
				if(dy - tempY > 0)
					tileSet[tempX][tempY++] = Tile.GROUND;
				else
					tileSet[tempX][tempY--] = Tile.GROUND;
			else
				if(dx - tempX > 0)
					tileSet[tempX++][tempY] = Tile.GROUND;
				else
					tileSet[tempX--][tempY] = Tile.GROUND;
		}
		tileSet[dx][dy] = Tile.GROUND;
		if(Global.rand(3, 0) == 0)
			if(direction.equals("up") || direction.equals("down")){
				if(tileSet[dx-1][dy] != Tile.GROUND && tileSet[dx+1][dy] != Tile.GROUND)
					tileSet[dx][dy] = Tile.DOOR;
			}
			else if(direction.equals("right") || direction.equals("left")){
				if(tileSet[dx][dy-1] != Tile.GROUND && tileSet[dx][dy+1] != Tile.GROUND)
					tileSet[dx][dy] = Tile.DOOR;
			}
	}
}
