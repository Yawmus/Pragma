package com.peter.server;

import com.esotericsoftware.kryonet.Connection;
import com.esotericsoftware.kryonet.Listener;
import com.peter.packets.AddPlayerPacket;
import com.peter.packets.CollisionPacket;
import com.peter.packets.MessagePacket;
import com.peter.packets.Player;
import com.peter.packets.PlayerPacket;
import com.peter.packets.RemovePlayerPacket;

public class ServerListener extends Listener{
		//This is run when a connection is received!
		public void connected(Connection c){
			Player player = new Player();
			player.x = player.y = player.oldX = player.oldY = 0;
			player.c = c;
			
			AddPlayerPacket packet = new AddPlayerPacket();
			packet.ID = c.getID();
			server.sendToAllExceptTCP(c.getID(), packet);
			
			for(Player p : map.players.values()){
				AddPlayerPacket packet2 = new AddPlayerPacket();
				packet2.ID = p.c.getID();
				c.sendTCP(packet2);
			}

			System.out.println(c.getID());
			map.players.put(c.getID(), player);
			System.out.println("Connection received.");
		}
		
		//This is run when we receive a packet.
		public void received(Connection c, Object o){
			if(o instanceof CollisionPacket){
				CollisionPacket packet = (CollisionPacket) o;
				if(map.marks.get(packet.x, packet.y) != -1){
					packet.collision = true;
					server.sendToUDP(c.getID(), packet);
				}
			}
			else if(o instanceof MessagePacket){
				MessagePacket packet = (MessagePacket) o;
				System.out.println(packet.message);
			}
			else if(o instanceof PlayerPacket){
				PlayerPacket packet = (PlayerPacket) o;
				//if(map.marks.get(packet.x, packet.y) == -1 || map.marks.get(packet.x, packet.y) == c.getID()){
					map.players.get(c.getID()).x = packet.x;
					map.players.get(c.getID()).y = packet.y;
					map.marks.put(c.getID(), packet.x, packet.y);
					map.players.get(c.getID()).oldX = packet.oldX;
					map.players.get(c.getID()).oldY = packet.oldY;
					map.marks.put(-1, packet.oldX, packet.oldY);
					packet.ID = c.getID();
					server.sendToAllExceptUDP(c.getID(), packet);
				//}
				//System.out.println("received and sent an update player packet");
			}
			else
				System.out.println("Missed!");
		}
		
		public void disconnected(Connection c){
			map.players.remove(c.getID());
			RemovePlayerPacket packet = new RemovePlayerPacket();
			map.marks.find(c.getID(), -1);
			packet.ID = c.getID();
			server.sendToAllExceptTCP(c.getID(), packet);
			System.out.println("Connection dropped.");
		}
}
