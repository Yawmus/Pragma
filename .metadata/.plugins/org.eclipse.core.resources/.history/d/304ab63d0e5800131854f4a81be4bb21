package com.peter.map;

import java.util.HashMap;

import com.peter.entities.Entity;
import com.peter.packets.ChestPacket;
import com.peter.packets.ItemPacket;
import com.peter.packets.Player;
import com.peter.server.Global;
import com.peter.map.Tile;

public class Map{
	
	public Tile[][] tiles;
    public HashMap<Integer, Entity> database;
	public final int HEIGHT = 40, WIDTH = 80;
	public final int ROOM_HEIGHT = 6, ROOM_WIDTH = 10, HALL_LENGTH = 6;
	protected static int floor;
	public HashMap<Integer, ChestPacket> chests;
	public HashMap<Integer, ItemPacket> items;
	public HashMap<Integer, Player> players;
	public HashMap<Integer, NPC> players;
	public Marks marks = new Marks();
	
	public Map(){
		database = new HashMap<Integer, Entity>();
		items = new HashMap<Integer, ItemPacket>();
		chests = new HashMap<Integer, ChestPacket>();
		players = new HashMap<Integer, Player>();
		

		tiles = new Tile[WIDTH][HEIGHT];
		baseFloor();
	}
	
	// ------------- Getters -------------
	/*public String getMark(float x, float y){
		if(y < 0 || x < 0 || y/32 >= HEIGHT || x/32 >= WIDTH)
			return "";
		else
			return marker[(int)(x/32)][(int)(y/32)];
	}
	
	public Entity get(Integer ID){
		if(ID != -1)
			return database.get(ID);
		return null;
	}
	public Entity get(float x, float y){
		return database.get(getMark(x, y));
	}
	
	public void put(String ID, Entity entity){
		database.put(ID, entity);
	}*/
	
	// ------------- Setters -------------
	/*public void setMark(String ID, float x, float y){
		marker[(int)(x/32)][(int)(y/32)] = ID;
	}*/
	
	/*public void remove(Integer ID){
		setMark(-1, (int)database.get(ID).getX()/32, (int)database.get(ID).getY()/32);
		database.remove(ID);
	}*/
	public Tile getTile(float x, float y){
		if(y < 0 || x < 0 || y/32 >= HEIGHT || x/32 >= WIDTH)
			return Tile.BLANK;
		return tiles[(int)(x/32)][(int)(y/32)];
	}
	
	
	private void baseFloor(){
		int seaX = WIDTH-9, seaY = 1;
		for(int x=0; x<WIDTH; x++)
			for(int y=0; y<HEIGHT; y++)
				if(y == 0 || y == HEIGHT-1 || x == 0 || x == WIDTH-1)
					tiles[x][y] = Tile.WALL;
				else
					tiles[x][y] = Tile.GROUND;
		
		createRoom(seaX-11, HEIGHT-12, seaX-3, HEIGHT-3, Tile.DOOR);
		createRoom(seaX-11, 4, seaX-3, 12, Tile.DOOR);
		createRoom(12, 9, 20, 14, Tile.DOOR);


		for(int x=WIDTH/2-1; x<=WIDTH/2+1; x++)
			for(int y=HEIGHT/2-1; y<=HEIGHT/2+1; y++)
				tiles[x][y] = Tile.WATER;
		
		for(int x=seaX; x<WIDTH-1; x++)
			for(int y=seaY; y<HEIGHT-1; y++)
				tiles[x][y] = Tile.WATER;
		
		for(int y=0; y<HEIGHT-1; y++)
			tiles[WIDTH-1][y] = Tile.BLANK;
		
		tiles[24][10] = Tile.DOWN;
	}
	
	private void createRoom(int x, int y, int dx, int dy, Tile type){
		for(int i=x; i<=dx; i++)
			for(int j=y; j<=dy; j++)
				if(j == y || j == dy || i == x || i == dx)
					tiles[i][j] = Tile.WALL;
				else
					tiles[i][j] = Tile.GROUND;
		switch(Global.rand(4, 0)){
		case 0:
			tiles[x][(y + dy)/2] = type;
			break;
		case 1:
			tiles[x + (dx - x)][(y + dy)/2] = type;
			break;
		case 2:
			tiles[(x + dx)/2][y] = type;
			break;
		case 3:
			tiles[(x + dx)/2][y + (dy - y)] = type;
			break;
		}
	}
}